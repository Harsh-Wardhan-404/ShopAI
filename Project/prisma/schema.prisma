generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Your existing models with updated IDs for NextAuth compatibility
model User {
  id            String    @id @default(cuid()) // Changed from Int to String
  name          String
  role          String    @default("BUYER")
  email         String    @unique
  password      String? // Made optional for OAuth users
  emailVerified DateTime?
  image         String? // For profile image from OAuth

  // NextAuth relations
  accounts Account[]
  sessions Session[]

  // Your existing relations
  orders   Order[]
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  price       Float
  stock       Int         @default(0)
  imageUrl    String?
  category    String?
  sellerId    String // Changed from Int to String to match User.id
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]
  seller      User        @relation(fields: [sellerId], references: [id])

  @@index([sellerId])
}

model Order {
  id              Int         @id @default(autoincrement())
  userId          String // Changed from Int to String to match User.id
  totalAmount     Float
  status          String      @default("pending")
  paymentMethod   String
  shippingAddress String?     @db.Text
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  user            User        @relation(fields: [userId], references: [id])
  items           OrderItem[]

  @@index([userId])
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  product   Product @relation(fields: [productId], references: [id])
  order     Order   @relation(fields: [orderId], references: [id])

  @@index([orderId])
  @@index([productId])
}
